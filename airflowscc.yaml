apiVersion: v1
kind: Namespace
metadata:
  name: airflow
---
# PVCs for DAGs and Logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-dags-pvc
  namespace: airflow
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: fast-storage
  resources:
    requests:
      storage: 50Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-logs-pvc
  namespace: airflow
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: fast-storage
  resources:
    requests:
      storage: 50Mi
---
# âœ… Airflow Config (points to existing Postgres)
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-env
  namespace: airflow
data:
  AIRFLOW__CORE__EXECUTOR: SequentialExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
  AIRFLOW__CORE__LOAD_EXAMPLES: "False"
  AIRFLOW__CORE__FERNET_KEY: "dGVzdGtleWZlcm5ldGtleWZlcm5ldGtleQ=="
---
# Airflow Webserver
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
  namespace: airflow
spec:
  selector:
    matchLabels:
      component: webserver
  template:
    metadata:
      labels:
        component: webserver
    spec:
      securityContext:
        fsGroup: 2000
      containers:
        - name: webserver
          image: apache/airflow:2.9.2
          envFrom:
            - configMapRef:
                name: airflow-env
          ports:
            - containerPort: 8080
          command:
            - bash
            - -c
            - |
              uid=$(id -u)
              if ! whoami &>/dev/null; then
                echo "airflow:x:${uid}:0:airflow user:/home/airflow:/bin/bash" >> /etc/passwd
              fi
              airflow db migrate || true
              airflow users create \
                --username admin --password admin \
                --firstname admin --lastname user \
                --role Admin --email admin@example.com || true
              exec airflow webserver
          volumeMounts:
            - name: dags
              mountPath: /opt/airflow/dags
            - name: logs
              mountPath: /opt/airflow/logs
      volumes:
        - name: dags
          persistentVolumeClaim:
            claimName: airflow-dags-pvc
        - name: logs
          persistentVolumeClaim:
            claimName: airflow-logs-pvc
---
# Airflow Scheduler
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
  namespace: airflow
spec:
  selector:
    matchLabels:
      component: scheduler
  template:
    metadata:
      labels:
        component: scheduler
    spec:
      securityContext:
        fsGroup: 2000
      containers:
        - name: scheduler
          image: apache/airflow:2.9.2
          envFrom:
            - configMapRef:
                name: airflow-env
          command:
            - bash
            - -c
            - |
              uid=$(id -u)
              if ! whoami &>/dev/null; then
                echo "airflow:x:${uid}:0:airflow user:/home/airflow:/bin/bash" >> /etc/passwd
              fi
              exec airflow scheduler
          volumeMounts:
            - name: dags
              mountPath: /opt/airflow/dags
            - name: logs
              mountPath: /opt/airflow/logs
      volumes:
        - name: dags
          persistentVolumeClaim:
            claimName: airflow-dags-pvc
        - name: logs
          persistentVolumeClaim:
            claimName: airflow-logs-pvc
---
# Webserver Service
apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver
  namespace: airflow
spec:
  type: NodePort
  ports:
    - port: 8080
      nodePort: 30808
  selector:
    component: webserver
